val sqlcontext = new org.apache.spark.sql.SQLContext(sc)
val userDF = sqlcontext.read.format("jdbc").option("url","jdbc:mysql://192.168.1.105:3306/cprime").option("dbtable","user").option("user","cprime").option("password","cprime123").option("driver","com.mysql.cj.jdbc.Driver").load()
userDF.createOrReplaceTempView("user")
val userDimensionDF = sqlcontext.read.format("jdbc").option("url","jdbc:postgresql://192.168.1.105:5432/captivate").option("dbtable","user_dimension").option("user","cprime").option("password","cprime123").option("driver","org.postgresql.Driver").load()
userDimensionDF.createOrReplaceTempView("user_dimension")
val certificationStateDimensionDF = sqlcontext.read.format("jdbc").option("url","jdbc:postgresql://192.168.1.105:5432/captivate").option("dbtable","certification_state_dimension").option("user","cprime").option("password","cprime123").option("driver","org.postgresql.Driver").load()
certificationStateDimensionDF.createOrReplaceTempView("certification_state_dimension")
val certificationStatusFactDF = sqlcontext.read.format("jdbc").option("url","jdbc:postgresql://192.168.1.105:5432/captivate").option("dbtable","certification_status_fact").option("user","cprime").option("password","cprime123").option("driver","org.postgresql.Driver").load()
certificationStatusFactDF.createOrReplaceTempView("certification_status_fact")
val finalDF = sqlcontext.sql("select * from user as u, certification_status_fact as csf, user_dimension as ud, certification_state_dimension as csd where csf.user_did = ud.user_did and u.user_id = ud.user_id and csd.certification_state_did = csf.certification_success_status_did")
finalDF.createOrReplaceTempView("final_table")
